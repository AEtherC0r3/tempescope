%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 14.0.0%%For: (Mark) ()%%Title: (tempescope.ai)%%CreationDate: 06/02/2017 15:16%%Canvassize: 16383%%BoundingBox: -78 119 1677 1170%%HiResBoundingBox: -77.7378 119.6943 1676.9541 1169.9956%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%RGBProcessColor: 0 0 0 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 842.5 595.0508 842.5 595.0508%AI3_TileBox: 535.8901 199.2754 1147.8896 991.2754%AI3_DocumentPreview: None%AI5_ArtSize: 1683.7803 1190.5513%AI5_RulerUnits: 1%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -1457.9048 1482.1416 0.6667 2475 1204 18 0 0 43 150 0 0%AI5_OpenViewLayers: 7%%PageOrigin:700.1597 453.5459%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 80 8%%BeginData: 7996 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFD05A8FFA8FFFD05%A8FFA8FD04FFA8FD13FFA8FD14FFA8A8FFA8FD11FFA8A8FD14FFA8A8FD15%FFA8FFFFA8FFA8FFFFA8FFFFA8FFA8FD1CFFA8FD13FFA8FD15FFA8FD15FF%A8FD15FFA8FFA8FFFFA8A8FFA8FFA8FFFFA8A8FFA8FD04FFA8FD13FFA8A8%FD13FFA8A8FFA8FD11FFA8A8A8FD13FFA8A8FD14FFA8A8FFA8A8FFA8FFA8%A8FFA8A8FFA8FFA8FD1AFFA8FD13FFA8FD15FFA8FD15FFA8FD15FFA8FFA8%FFFFA8FFFFA8FFA8FFFFA8FFFFA8FD04FFA8FD13FFA8A8FD13FFA8A8FD13%FFA8A8FD14FFA8A8FD15FFA8FFA8A8FFA8FFFFA8FFA8A8FFA8FD1CFFA8FD%13FFA8FD15FFA8FD15FFA8FD15FFA8FFFD06A87DFD08A8FFA8FFA8A8FD13%FFA8A8FD13FFA8A8FD13FFA8A8A8FD13FFA8A8FD14FFA8FFFFFD04A8FFA8%FFA8FFA8A8A8FFA8FFA8FFA8A8FD15FFA8FD13FFA8FD15FFA8FD15FFA8FD%15FFA8FFA8FD11FFA8A8FD13FFA8A8FD13FFA8A8FD13FFA8A8A8FD13FFA8%A8FD14FFA8A8A8FD12FFA8FD15FFA8FD13FFA8FD15FFA8FD15FFA8FD15FF%A8FD13FFA8A8FD13FFA8A8FD13FFA8A8FD13FFA8A8A8FD13FFA8A8FD14FF%A8A8FFFFA8FFA8FFFFFFA8FFFFFFA8A8FFFFA8FD18FFA8FD13FFA8FD15FF%A8FD15FFA8FD15FFA8FD13FFA8A8FD13FFA8A8FD13FFA8A8FD13FFA8A8FD%14FFA8A8FD14FFA8A8FFFFA8FD07FFA8FD1EFFA8FD13FFA8FD15FFA8FD15%FFA8FD15FFA8FFFFFFA8FD0FFFA8A8FD13FFA8A8FD13FFA8A8FD13FFA8A8%A8FD13FFA8A8FD14FFA8A8FD04FFA8FFFFFFA8FD05FFA8FD04FFA8FD15FF%A8FD13FFA8FD15FFA8FD15FFA8FD15FFA8FD13FFA8A8FD13FFA8A8FD13FF%A8A8FD13FFA8A8A8FD13FFA8A8FD14FFA8A8FD13FFA8FD15FFA8FD13FFA8%FD15FFA8FD15FFA8FD15FFA8FD13FFA8A8FD13FFA8A8FD13FFA8A8FD13FF%A8A8A8FD13FFA8A8FD14FFA8A8FFFFA8A8FD04FFA8FFFFFFA8FFFFFFA8FD%18FFA8FD13FFA8FD15FFA8FD15FFA8FD15FFA8FD13FFA8A8FD13FFA8A8FD%13FFA87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8FD14FFA8A8%FD14FFA8A8FD0AFFA8FD1EFFA8FD13FFA8FD15FFA8FD15FFA8FD15FFA8FD%09FFA8FD09FFA8A8FD13FFA8A8FD13FFA8A8FD14FFA8A8FD13FFA8A8FD14%FFA8A8FD06FFA8FD09FFA8FFFFA8FD15FFA8FD13FFA8FD15FFA8FD15FFA8%FD15FFA8FD0FFFA8FFFFFFA8A8FD13FFA8A8FD13FFA8A8FD14FFA8FD14FF%A8A8FD14FFA8A8FD13FFA8FD15FFA8FD13FFA8FD15FFA8FD15FFA8FD15FF%A8FD13FFA8A8FD13FFA8A8FD13FFA8A8FD13FFA8A8FD14FFA8A8FD14FFA8%A8FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD04FFA8FD15FFA8FD13FFA8FD15%FFA8FD15FFA8FD15FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%A8FD13FFA8A8FD13FFA8A8FD14FFA8FD14FFA8A8FD14FFFD05A8FFA8A8A8%FFA8A8A8FFFD04A8FD19FFA8FD13FFA8FD15FFA8FD15FFA8FD15FFA8FD0F%FFA8FD04FFA8FD13FFA8A8FD13FFA8A8FD14FFA8A8FD13FFA8A8FD14FFA8%A8FD0FFFA8A8FD18FFA8FD13FFA8FD05FFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FD15FFA8FD15FFA8FD0FFFA8FD04FFA8FD13FFA8A8FD13FFFD04%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FD14FFA8A8FD14FFA8A8%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8A8FD19FFA8FD13FFA8FD15FFA8FD15%FFA8FD15FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD04FFA8FD13FFA8%A8FD13FFA8A8FD13FFA8A8FD14FFA8A8FD14FFA8A8FFFFA8FFFFFFA8FFFF%FFA8FD04FFA8A8FD18FFA8FD13FFA8FD15FFA8FD15FFA8FD15FFA8FD0FFF%A8FD04FFA8FD13FFA8A8FD13FFA8A8FD13FFA8A8FD14FFA8A8FD14FFA8A8%FD29FFA8FD13FFA8A8FD14FF7DFD15FFA8FD15FF7DFFA8A8A8FFA8A8A8FF%A8A8A8FFA8FFA8FD04FFA8FD13FFA8A8FD13FFA8A8FD13FFA8A8A8FD13FF%A8A8FD14FFFD11A8FD1AFFA8FD13FFA8A8FD14FFA8FD15FFA8FD15FFA8FD%14FFA8FD13FFA8A8FD13FFA8A8FD13FFA8A8FD14FFA8A8FD14FFA8A8FD0E%FFA8FD1AFFA8FD13FFA8FD15FFA8FD15FFA8FD15FFA8FD14FFA8FD13FFA8%A8FD13FFA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8FD14FF%A8A8FD14FFFD04A87DA8A8A87DA8A8A87DA8A8A87DFD1AFFA8FD13FFA8A8%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD15FFA8FD15FFA8FD%14FFA8FD13FFA8A8FD13FFA8A8FD14FFA8FD14FFA8A8FD14FFA8A8FD0EFF%A8FD1AFFA8FD13FFA8FD15FFA8FD15FFA8FD15FFA8FD14FFA8FD13FFA8A8%FD13FFA8A8FD14FFA8A8FD13FFA8A8FD14FFA8A8FD0EFFA8FD1AFFA8FD13%FFA8FD15FFA8FD15FFA8FD15FF7DFD10A8FD04FFA8FD13FFA8A8FD13FFA8%A8FD14FFA8FD14FFA8A8FD14FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%A8A8FD18FFA8FD13FFA8FD15FFA8FD15FFA8FD15FFA8FD0FFFA8FD04FFA8%FD13FFA8A8FD13FFA8A8FD13FFA8A8FD14FFA8A8FD14FFA8A8FD10FFA8FD%18FFA8FD13FFA8FD15FFA8FD15FFA8FD15FFA8FD0FFFA8FD04FFA8FD13FF%A8A8FD13FFA8A8FD14FFA8FD14FFA8A8FD14FFFD0DA8FFA8A8A8FD1AFFA8%FD13FFA8FD15FFA8FD15FFA8FD15FF7DA87DFD06A8FD0CFFA8FD13FFA8A8%FD13FFA8A8FD14FFA8A8FD13FFA8A8FD14FFA8A8A8FFA8FFA8FF7DFD08A8%FD1AFFA8FD13FFA8FD15FFA8FD15FFA8FD15FFA8FFFFFFA8FFA8A87DA87D%A87DA87DA8A8FD04FFA8FD07FFA8FD0BFFA8A8FD13FFA8A8FD14FFA8FD14%FFA8A8FD15FF7D7DA8A8FFA8FFA8A8A8FD06FFA8A8FD04FFA8FD09FFA8FF%A8FFA8FD05FFA8FD13FFA8FD15FFA8FD15FFA8FD15FF7DA87DFFFFA8FFA8%7DFD07FFA8FD04FFA8FD0AFFA8A8FFFFA8A8FFFFFFA8A8FD13FFA8A8FD13%FFA8A8FD14FFA8A8FD15FFA87DA8A8FFA8FF7DA8FD08FFA8FD0EFFA8FD09%FFA8FD13FFA8FD15FFA8FD15FFA8FD15FF7DA87DFFFFA8FFA87DFD07FFA8%FD04FFA8FD0FFFA8FFFFFFA8A8FD13FFA8A8FD14FFA8FD14FFA8A8FD15FF%A87DA8A8FFA8FFA8A8FD17FFA8FFFFFFA8FD05FFA8FD13FFA8FD15FFA8FD%15FFA8FD15FF7DA8A8FFFFA8FFA87DFD07FFA8FD04FFA8FD0BFFA8FFA8FF%A8FFFFFFA8A8FD13FFA8A8FD14FFA8A8FD13FFA8A8FD15FF7D7DA8A8FFA8%FF7D7DFD07FFA8A8FD18FFA8FD13FFA8FD15FFA8FD15FFA8FD15FF7DA8A8%FFFFA8FFA87DFD07FFA8FD04FFA8FD13FFA8A8FD13FFA8A8FD14FFA8FD14%FFA8A8FD15FF7D7DA8A8FFA8FFA8A8FD08FFA8FD18FFA8FD13FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD15FFA8FD15FF7DA87DFF%FFA8FFA87DFD07FFA8FD04FFA8FD13FFA8A8FD13FFA8A8FFA8A8A8FFA8A8%A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8FD13FFA8A8FD15FFA87DA8A8FFA8FF%A8A8FD08FFA8FD18FFA8FD13FFA8FD15FFA8FD15FFA8FD15FF7DA87DFFFF%A8FFFFA8FD07FFA8FD04FFA8FD13FFA8A8FD13FFA8A8FD13FFA8A8FD14FF%A8A8FD15FFA87DA8A8FFA8FF7DA8FD21FFA8FD13FFA8FD15FFA8FD15FFA8%FD15FF7DA8A8FFFFA8FFA87DFD07FFA8FD04FFA8FD13FFA8A8FD13FFA8A8%FD13FFA8A8A8FD13FFA8A8FD15FF7D7DA8A8FFA8FFA8A8A8FD06FFA8A8FD%18FFA8FD13FFA8FD15FFA8FD15FFA8FD15FF7DA8A8FFFFA8FFA87DFD07FF%A8FD04FFA8FD13FFA8A8FD13FFA8A8FD13FFA8A8A8FD13FFA8A8FD15FFA8%7DA8A8FFA8FFA8A8FD08FFA8FD18FFA8FD13FFA8FD15FFA8FD15FFA8FD15%FFA8FD04FFA8FFFFA8FD07FFA8FD04FFA8FD13FFA8A8FD13FFA8A8FD13FF%A8A8A8FD13FFA8A8FD14FFA8FFFFFFA8FFA8FFA8A8A8FD07FFA8FFFFFFA8%A8FD13FFA8FD13FFA8FD15FFA8FD15FFA8FD15FFA8FD04FFA8FFFFA8FD07%FFA8FD04FF7DFFA8FD11FFA8A8FD13FFA8A8FD13FFA8A8FD14FFA8A8FD14%FFA8FFFFFFA8A87DFFA8A8A8FFA8FFA8FFA8FD05FFFD04A8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FD09FFA8FFA8FFA8FFA8FD04FFA8FFFFFFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FD16FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.860075 0.849699 0.789548 1 ([Registration]) 0 Xs([Registration])PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 A0 R0.860075 0.849699 0.789548 1 0 0 0 XA1 J 1 j 1.44 w 10 M []0 d0 XR1495.3359 410.5029 m1495.3359 339.9707 L1501.0898 339.9707 L1501.0898 410.5029 L1495.3359 410.5029 LS1463.6396 410.5029 m1491.9375 410.5029 L1491.9375 128.376 L1463.6396 128.376 L1463.6396 410.5029 LS1.92 w1630.667 948.3237 m1630.667 948.3237 LS1.44 w1578.3867 912.8174 m1580.2393 912.8174 1581.7432 914.3213 1581.7432 916.1763 c1581.7432 918.0308 1580.2393 919.5356 1578.3867 919.5356 c1576.5313 919.5356 1575.0293 918.0308 1575.0293 916.1763 c1575.0293 914.3213 1576.5313 912.8174 1578.3867 912.8174 Cs1445.0449 1019.335 m1446.8984 1019.335 1448.4023 1020.8389 1448.4023 1022.6943 c1448.4023 1024.5493 1446.8984 1026.0522 1445.0449 1026.0522 c1443.1904 1026.0522 1441.6885 1024.5493 1441.6885 1022.6943 c1441.6885 1020.8389 1443.1904 1019.335 1445.0449 1019.335 Cs1.92 w1604.2861 994.8647 m1604.2861 994.8647 LS1599.9688 933.9287 m1599.9688 933.9287 LS1.44 w1458.8428 128.376 m1458.8428 410.5029 L1430.542 410.5029 L1430.542 128.376 L1458.8428 128.376 LS1424.7881 184.0332 m1419.5117 184.0332 L1419.5117 410.5029 LS1424.7881 184.0332 m1424.7881 410.5029 L1419.5117 410.5029 LS1413.7578 410.5029 m1413.7578 184.0332 LS1408.001 410.5029 m1408.001 184.0332 L1413.7578 184.0332 LS1408.001 410.5029 m1413.7578 410.5029 LS1.92 w1555.8428 857.1606 m1555.8428 857.1606 LS1.44 w1487.7344 415.8584 m1496.3701 415.8584 L1496.3701 427.3691 L1487.7344 427.3691 L1487.7344 415.8584 LS1515.5635 427.3691 m1515.5635 415.8584 L1524.2012 415.8584 L1524.2012 427.3691 L1515.5635 427.3691 LS1502.1289 427.3691 m1502.1289 415.8584 L1510.7646 415.8584 L1510.7646 427.3691 L1502.1289 427.3691 LS1.92 w1510.7559 843.7256 m1510.7559 843.7256 LS1.44 w1582.2236 1010.6982 m1584.0762 1010.6982 1585.582 1012.2021 1585.582 1014.0571 c1585.582 1015.9116 1584.0762 1017.4155 1582.2236 1017.4155 c1580.3682 1017.4155 1578.8662 1015.9116 1578.8662 1014.0571 c1578.8662 1012.2021 1580.3682 1010.6982 1582.2236 1010.6982 Cs1471.9063 956.481 m1473.7588 956.481 1475.2627 957.9839 1475.2627 959.8398 c1475.2627 961.6943 1473.7588 963.1973 1471.9063 963.1973 c1470.0488 963.1973 1468.5479 961.6943 1468.5479 959.8398 c1468.5479 957.9839 1470.0488 956.481 1471.9063 956.481 Cs1.92 w1449.3623 870.1147 m1449.3623 870.1147 LS2.4 w1475.7432 829.3315 m1475.7432 829.3315 LS1469.0273 993.4263 m1469.0273 993.4263 LS1636.4229 880.6704 m1636.4229 880.6704 LS1.92 w1479.0996 1036.1284 m1479.0996 1036.1284 LS1.44 w1518.4297 1016.4565 m1520.2852 1016.4565 1521.7871 1017.96 1521.7871 1019.8154 c1521.7871 1021.6699 1520.2852 1023.1733 1518.4297 1023.1733 c1516.5771 1023.1733 1515.0732 1021.6699 1515.0732 1019.8154 c1515.0732 1017.96 1516.5771 1016.4565 1518.4297 1016.4565 Cs1541.9326 981.4307 m1543.7871 981.4307 1545.291 982.9336 1545.291 984.7886 c1545.291 986.644 1543.7871 988.147 1541.9326 988.147 c1540.0771 988.147 1538.5752 986.644 1538.5752 984.7886 c1538.5752 982.9336 1540.0771 981.4307 1541.9326 981.4307 Cs1467.5889 1019.335 m1469.4434 1019.335 1470.9453 1020.8389 1470.9453 1022.6943 c1470.9453 1024.5493 1469.4434 1026.0522 1467.5889 1026.0522 c1465.7354 1026.0522 1464.2305 1024.5493 1464.2305 1022.6943 c1464.2305 1020.8389 1465.7354 1019.335 1467.5889 1019.335 Cs1.92 w1510.2754 869.1548 m1510.2754 869.1548 LS1.44 w1445.0449 977.1118 m1446.8984 977.1118 1448.4023 978.6157 1448.4023 980.4707 c1448.4023 982.3252 1446.8984 983.8306 1445.0449 983.8306 c1443.1904 983.8306 1441.6885 982.3252 1441.6885 980.4707 c1441.6885 978.6157 1443.1904 977.1118 1445.0449 977.1118 Cs1630.667 1015.4966 m1632.5215 1015.4966 1634.0234 1017.0005 1634.0234 1018.8555 c1634.0234 1020.7109 1632.5215 1022.2139 1630.667 1022.2139 c1628.8135 1022.2139 1627.3105 1020.7109 1627.3105 1018.8555 c1627.3105 1017.0005 1628.8135 1015.4966 1630.667 1015.4966 Cs1.92 w1479.0996 884.5098 m1479.0996 884.5098 LS1.44 w1435.9326 837.4888 m1437.7871 837.4888 1439.2891 838.9917 1439.2891 840.8462 c1439.2891 842.7021 1437.7871 844.2051 1435.9326 844.2051 c1434.0771 844.2051 1432.5732 842.7021 1432.5732 840.8462 c1432.5732 838.9917 1434.0771 837.4888 1435.9326 837.4888 Cs1622.0322 839.4077 m1623.8867 839.4077 1625.3926 840.9106 1625.3926 842.7666 c1625.3926 844.6211 1623.8867 846.124 1622.0322 846.124 c1620.1787 846.124 1618.6758 844.6211 1618.6758 842.7666 c1618.6758 840.9106 1620.1787 839.4077 1622.0322 839.4077 Cs2.4 w1546.7295 828.3716 m1546.7295 828.3716 LS1.92 w1589.8975 891.707 m1589.8975 891.707 LS1518.9102 978.0718 m1518.9102 978.0718 LS1555.3643 949.2827 m1555.3643 949.2827 LS2.4 w1444.085 948.3237 m1444.085 948.3237 LS1494.4473 990.0664 m1494.4473 990.0664 LS1.92 w1510.7559 929.6108 m1510.7559 929.6108 LS1491.5713 945.9243 m1491.5713 945.9243 LS1467.1084 921.4551 m1467.1084 921.4551 LS1.44 w1538.5752 868.6763 m1540.4287 868.6763 1541.9326 870.1792 1541.9326 872.0342 c1541.9326 873.8896 1540.4287 875.3926 1538.5752 875.3926 c1536.7207 875.3926 1535.2188 873.8896 1535.2188 872.0342 c1535.2188 870.1792 1536.7207 868.6763 1538.5752 868.6763 Cs1520.8281 955.0405 m1522.6826 955.0405 1524.1865 956.5454 1524.1865 958.3999 c1524.1865 960.2549 1522.6826 961.7588 1520.8281 961.7588 c1518.9746 961.7588 1517.4717 960.2549 1517.4717 958.3999 c1517.4717 956.5454 1518.9746 955.0405 1520.8281 955.0405 Cs1620.1143 907.5405 m1621.9697 907.5405 1623.4736 909.0435 1623.4736 910.8984 c1623.4736 912.7539 1621.9697 914.2568 1620.1143 914.2568 c1618.2598 914.2568 1616.7578 912.7539 1616.7578 910.8984 c1616.7578 909.0435 1618.2598 907.5405 1620.1143 907.5405 Cs1511.2363 901.7832 m1513.0898 901.7832 1514.5928 903.2861 1514.5928 905.1406 c1514.5928 906.9956 1513.0898 908.4995 1511.2363 908.4995 c1509.3818 908.4995 1507.8799 906.9956 1507.8799 905.1406 c1507.8799 903.2861 1509.3818 901.7832 1511.2363 901.7832 Cs2.4 w1478.6191 907.5405 m1478.6191 907.5405 LS1.44 w1594.6934 955.521 m1596.5479 955.521 1598.0518 957.0239 1598.0518 958.8784 c1598.0518 960.7344 1596.5479 962.2383 1594.6934 962.2383 c1592.8398 962.2383 1591.3359 960.7344 1591.3359 958.8784 c1591.3359 957.0239 1592.8398 955.521 1594.6934 955.521 Cs1449.3623 908.019 m1451.2158 908.019 1452.7197 909.5239 1452.7197 911.3789 c1452.7197 913.2334 1451.2158 914.7373 1449.3623 914.7373 c1447.5078 914.7373 1446.0039 913.2334 1446.0039 911.3789 c1446.0039 909.5239 1447.5078 908.019 1449.3623 908.019 Cs1484.8564 856.6807 m1486.709 856.6807 1488.2129 858.1841 1488.2129 860.0386 c1488.2129 861.8945 1486.709 863.3975 1484.8564 863.3975 c1483.001 863.3975 1481.4971 861.8945 1481.4971 860.0386 c1481.4971 858.1841 1483.001 856.6807 1484.8564 856.6807 Cs1.92 w1541.9326 897.4644 m1541.9326 897.4644 LS1559.2012 881.1504 m1559.2012 881.1504 LS1534.7383 932.9697 m1534.7383 932.9697 LS1553.9238 966.5562 m1553.9238 966.5562 LS1596.1318 1033.73 m1596.1318 1033.73 LS1610.5215 867.2358 m1610.5215 867.2358 LS2.4 w1579.8252 993.4263 m1579.8252 993.4263 LS1548.167 1033.73 m1548.167 1033.73 LS1.44 w525.2114 1123.4917 m532.8955 1123.4917 539.1216 1129.7222 539.1216 1137.4063 c539.1216 1145.0908 532.8955 1151.3208 525.2114 1151.3208 c517.5298 1151.3208 511.3027 1145.0908 511.3027 1137.4063 c511.3027 1129.7222 517.5298 1123.4917 525.2114 1123.4917 Cs81.7441 382.8701 m83.8638 382.8701 85.5811 384.5889 85.5811 386.709 c85.5811 388.8301 83.8638 390.5469 81.7441 390.5469 c79.6245 390.5469 77.9072 388.8301 77.9072 386.709 c77.9072 384.5889 79.6245 382.8701 81.7441 382.8701 Cs138.3418 326.2539 m140.4614 326.2539 142.1797 327.9727 142.1797 330.0918 c142.1797 332.2109 140.4614 333.9297 138.3418 333.9297 c136.2231 333.9297 134.5049 332.2109 134.5049 330.0918 c134.5049 327.9727 136.2231 326.2539 138.3418 326.2539 Cs138.3418 382.8701 m140.4614 382.8701 142.1797 384.5889 142.1797 386.709 c142.1797 388.8301 140.4614 390.5469 138.3418 390.5469 c136.2231 390.5469 134.5049 388.8301 134.5049 386.709 c134.5049 384.5889 136.2231 382.8701 138.3418 382.8701 Cs110.0439 326.2539 m127.7925 326.2539 142.1797 340.6455 142.1797 358.3994 c142.1797 376.1553 127.7925 390.5469 110.0439 390.5469 c92.2954 390.5469 77.9072 376.1553 77.9072 358.3994 c77.9072 340.6455 92.2954 326.2539 110.0439 326.2539 Cs81.7441 326.2539 m83.8638 326.2539 85.5811 327.9727 85.5811 330.0918 c85.5811 332.2109 83.8638 333.9297 81.7441 333.9297 c79.6245 333.9297 77.9072 332.2109 77.9072 330.0918 c77.9072 327.9727 79.6245 326.2539 81.7441 326.2539 Cs-55.4341 122.8154 m-48.0166 122.8154 -42.0034 128.8291 -42.0034 136.248 c-42.0034 143.6689 -48.0166 149.6846 -55.4341 149.6846 c-62.8521 149.6846 -68.8643 143.6689 -68.8643 136.248 c-68.8643 128.8291 -62.8521 122.8154 -55.4341 122.8154 Cs36.1787 385.75 m38.2974 385.75 40.0156 387.4688 40.0156 389.5879 c40.0156 391.707 38.2974 393.4258 36.1787 393.4258 c34.0591 393.4258 32.3418 391.707 32.3418 389.5879 c32.3418 387.4688 34.0591 385.75 36.1787 385.75 Cs-48.7188 385.75 m-46.6001 385.75 -44.8818 387.4688 -44.8818 389.5879 c-44.8818 391.707 -46.6001 393.4258 -48.7188 393.4258 c-50.8384 393.4258 -52.5566 391.707 -52.5566 389.5879 c-52.5566 387.4688 -50.8384 385.75 -48.7188 385.75 Cs7.87891 385.75 m9.99854 385.75 11.7158 387.4688 11.7158 389.5879 c11.7158 391.707 9.99854 393.4258 7.87891 393.4258 c5.75928 393.4258 4.04199 391.707 4.04199 389.5879 c4.04199 387.4688 5.75928 385.75 7.87891 385.75 Cs1407.1543 1046.6841 m1414.8359 1046.6841 1421.0625 1052.9136 1421.0625 1060.5986 CS1529.4785 427.3691 m1529.4785 415.8584 L1538.1143 415.8584 L1538.1143 427.3691 L1529.4785 427.3691 LS497.8716 279.8281 m792.375 279.8281 L792.375 574.9102 L497.8716 574.9102 L497.8716 279.8281 LS1607.8828 588.2275 m1607.8828 644.8457 L1392.5225 644.8457 L1392.5225 588.2275 L1607.8828 588.2275 LS1619.3955 708.6597 m1392.5225 708.6597 L1392.5225 652.043 L1619.3955 652.043 L1619.3955 708.6597 LS1392.5225 581.5107 m1392.5225 524.8945 L1607.8828 524.8945 L1607.8828 581.5107 L1392.5225 581.5107 LS1501.8828 1080.3496 m1470.7061 1080.3496 L1470.7061 1165.2754 LS-20.4199 385.75 m-18.3003 385.75 -16.583 387.4688 -16.583 389.5879 c-16.583 391.707 -18.3003 393.4258 -20.4199 393.4258 c-22.5386 393.4258 -24.2568 391.707 -24.2568 389.5879 c-24.2568 387.4688 -22.5386 385.75 -20.4199 385.75 Cs1470.7061 1165.2754 m1501.8828 1165.2754 L1501.8828 1080.3496 LS1396.3613 1165.2754 m1427.5391 1165.2754 L1427.5391 1086.1069 L1396.3613 1086.1069 L1396.3613 1165.2754 LS1465.4307 1165.2754 m1465.4307 1080.3496 L1434.252 1080.3496 L1434.252 1165.2754 L1465.4307 1165.2754 LS1619.3955 776.313 m1619.3955 719.6963 L1392.5225 719.6963 L1392.5225 776.313 L1619.3955 776.313 LS1407.1543 1046.6831 m1392.7627 1046.6831 L1392.7627 791.4263 L1676.2344 791.4263 L1676.2344 1074.9927 L1421.543 1074.9927 L1421.543 1060.5986 LS1619.4248 411.1748 m1505.7119 411.1748 L1505.7119 127.7031 L1619.4248 127.7031 L1619.4248 411.1748 LS501.23 120.4141 m784.7012 120.4141 L784.7012 267.7188 L501.23 267.7188 L501.23 120.4141 LS496.9136 882.1484 m496.9136 1165.7158 L780.3838 1165.7158 L780.3838 882.1484 L496.9136 882.1484 LS493.6777 120.4141 m493.6777 1169.2754 L210.207 1169.2754 L210.207 120.4141 L493.6777 120.4141 LS1090.6729 120.4141 m1090.6729 1169.2754 L796.1709 1169.2754 L796.1709 120.4141 L1090.6729 120.4141 LS-77.0176 120.4141 m-77.0176 1169.2754 L206.4517 1169.2754 L206.4517 120.4141 L-77.0176 120.4141 LS1094.2646 120.4141 m1094.2646 1169.2754 L1389.249 1169.2754 L1389.249 120.4141 L1094.2646 120.4141 LS497.8716 877.3501 m792.375 877.3501 L792.375 582.748 L497.8716 582.748 L497.8716 877.3501 LS509.3843 588.5059 m509.3843 730.0503 L781.3423 730.0503 L781.3423 588.5059 L509.3843 588.5059 LS2.4 w1588.458 875.8721 m1588.458 875.8721 LS1624.4316 979.5117 m1624.4316 979.5117 LS1.92 w1556.3213 922.4141 m1556.3213 922.4141 LS1579.8252 838.4478 m1579.8252 838.4478 LS1.44 w1398.5215 434.1826 m1407.1572 434.1826 L1407.1572 445.6934 L1398.5215 445.6934 L1398.5215 434.1826 LS1426.3506 445.6934 m1426.3506 434.1826 L1434.9883 434.1826 L1434.9883 445.6934 L1426.3506 445.6934 LS1412.916 445.6934 m1412.916 434.1826 L1421.5518 434.1826 L1421.5518 445.6934 L1412.916 445.6934 LS1440.2656 445.6934 m1440.2656 434.1826 L1448.9014 434.1826 L1448.9014 445.6934 L1440.2656 445.6934 LS1611.7217 1080.3496 m1580.5449 1080.3496 L1580.5449 1165.2754 LS1580.5449 1165.2754 m1611.7217 1165.2754 L1611.7217 1080.3496 LS1506.2002 1165.2754 m1537.3779 1165.2754 L1537.3779 1086.1069 L1506.2002 1086.1069 L1506.2002 1165.2754 LS1575.2695 1165.2754 m1575.2695 1080.3496 L1544.0908 1080.3496 L1544.0908 1165.2754 L1575.2695 1165.2754 LS1619.3955 513.3936 m1392.5225 513.3936 L1392.5225 456.7764 L1619.3955 456.7764 L1619.3955 513.3936 LS1401.4424 184.0332 m1396.166 184.0332 L1396.166 410.5029 LS1401.4424 184.0332 m1401.4424 410.5029 L1396.166 410.5029 LS1495.3359 332.5342 m1495.3359 262.002 L1501.0898 262.002 L1501.0898 332.5342 L1495.3359 332.5342 LS1495.3359 251.5029 m1495.3359 180.9707 L1501.0898 180.9707 L1501.0898 251.5029 L1495.3359 251.5029 LS1545.2695 415.8584 m1553.9053 415.8584 L1553.9053 427.3691 L1545.2695 427.3691 L1545.2695 415.8584 LS1573.0986 427.3691 m1573.0986 415.8584 L1581.7363 415.8584 L1581.7363 427.3691 L1573.0986 427.3691 LS1559.6641 427.3691 m1559.6641 415.8584 L1568.2998 415.8584 L1568.2998 427.3691 L1559.6641 427.3691 LS1587.0137 427.3691 m1587.0137 415.8584 L1595.6494 415.8584 L1595.6494 427.3691 L1587.0137 427.3691 LS1456.0566 434.1826 m1464.6924 434.1826 L1464.6924 445.6934 L1456.0566 445.6934 L1456.0566 434.1826 LS1483.8857 445.6934 m1483.8857 434.1826 L1492.5234 434.1826 L1492.5234 445.6934 L1483.8857 445.6934 LS1470.4512 445.6934 m1470.4512 434.1826 L1479.0869 434.1826 L1479.0869 445.6934 L1470.4512 445.6934 LS1497.8008 445.6934 m1497.8008 434.1826 L1506.4365 434.1826 L1506.4365 445.6934 L1497.8008 445.6934 LSLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF